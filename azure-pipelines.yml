# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  BuildConfiguration: 'Release'
  Parameters.RestoreBuildProjects: '**/*.csproj'

steps:
- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '$(Parameters.RestoreBuildProjects)'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '$(Parameters.RestoreBuildProjects)'
    arguments: '--configuration $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: '**/*[Tt]ests/*.csproj'
    arguments: '--configuration $(BuildConfiguration)  /p:CollectCoverage=true  /p:CoverletOutputFormat=cobertura   /p:CoverletOutput=$(Build.SourcesDirectory)\TestResults\Coverage\'

- task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
  displayName: ReportGenerator
  inputs:
    reports: '$(Build.SourcesDirectory)/TestResults/Coverage/coverage.cobertura.xml'
    targetdir: '$(Build.SourcesDirectory)/TestResults/Coverage'
    sourcedirs: '$(Build.SourcesDirectory)'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage results'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/TestResults/Coverage/*cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/TestResults/Coverage'

- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
    zipAfterPublish: True

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()
# Docker image
# Build a Docker image to run, deploy, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/vsts/pipelines/languages/docker

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  imageName: 'your-container-image-name:$(build.buildId)'

steps:
- script: docker build -f Dockerfile -t $(imageName) .
  displayName: 'docker build'
- task: Docker@0

  displayName: 'Build an image'

  inputs:

    azureSubscription: 'LearnCluster - Service Endpoint'



    azureContainerRegistry: '{"loginServer":"learn93a9.azurecr.io", "id" : "/subscriptions/e97f6c4e-c830-479b-81ad-1aff1dd07470/resourceGroups/Learn8461/providers/Microsoft.ContainerRegistry/registries/Learn93a9"}'



    imageName: 'learn93a9.azurecr.io/learncluster:$(Build.BuildId)'





- task: Docker@0

  displayName: 'Push an image'

  inputs:

    azureSubscription: 'LearnCluster - Service Endpoint'



    azureContainerRegistry: '{"loginServer":"learn93a9.azurecr.io", "id" : "/subscriptions/e97f6c4e-c830-479b-81ad-1aff1dd07470/resourceGroups/Learn8461/providers/Microsoft.ContainerRegistry/registries/Learn93a9"}'



    action: 'Push an image'



    imageName: 'learn93a9.azurecr.io/learncluster:$(Build.BuildId)'





- task: HelmInstaller@0

  displayName: 'Install Helm 2.9.1'

  inputs:

    helmVersion: 2.9.1



    kubectlVersion: 1.10.3



    checkLatestKubectl: false





- task: HelmDeploy@0

  displayName: 'helm init --client-only'

  inputs:

    azureSubscription: 'LearnCluster - Service Endpoint'



    azureResourceGroup: Learn8461



    kubernetesCluster: LearnCluster



    command: init



    upgradeTiller: false



    arguments: '--client-only'





- task: HelmDeploy@0

  displayName: 'helm package'

  inputs:

    azureSubscription: 'LearnCluster - Service Endpoint'



    azureResourceGroup: Learn8461



    kubernetesCluster: LearnCluster



    command: package



    chartPath: charts/sampleapp



    save: false





- task: PublishBuildArtifacts@1

  displayName: 'Publish Artifacts: drop'
